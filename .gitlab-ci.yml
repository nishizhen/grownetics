image: docker:19.03

services:
  - name: docker:19.03.0-dind
    alias: docker

stages:
  - build
  - package
  # - test
  - review
  - release
  - deploy

pages:
  stage: build
  image: python:3.7.3-alpine
  script:
    - pip install mkdocs
    - pip install mkdocs-material

    - mkdocs build
    - mv site public
  artifacts:
    paths:
      - public
  only:
    - master

'Package Handbook':
  stage: package
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin docker.io
    - docker build -t grownetics/handbook:$CI_PIPELINE_ID -f Dockerfile.handbook .
    - docker push grownetics/handbook:$CI_PIPELINE_ID
  only:
    - master

'Build Socket':
  stage: build
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin docker.io
    - docker build Server/html/images/socketio --pull --no-cache -t grownetics/socketio:$CI_PIPELINE_ID -f Server/html/images/socketio/Dockerfile
    - docker push grownetics/socketio:$CI_PIPELINE_ID

'Build GrowServer':
  stage: build
  script:
    - cd Server/
    - docker run -v ${PWD}:/var/www grownetics/build:1.1 /var/www/build.sh
    - cd ../
    - export DOCKER_CLI_EXPERIMENTAL=enabled
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin docker.io
    - docker build Server/html --pull --no-cache -t grownetics/growdash:$CI_PIPELINE_ID -f Server/html/images/growdash/Dockerfile.dev
    - docker build Server/html --platform linux/arm64 --pull --no-cache -t grownetics/growdash:$CI_PIPELINE_ID -f Server/html/images/growdash/Dockerfile.dev
    - docker push grownetics/growdash:$CI_PIPELINE_ID

    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin docker.io
    - docker build Server/html --pull --no-cache -t grownetics/nginx:$CI_PIPELINE_ID -f Server/html/images/nginx/Dockerfile
    - docker push grownetics/nginx:$CI_PIPELINE_ID

    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin docker.io
    - docker build Server/html --pull --no-cache -t grownetics/supercron:$CI_PIPELINE_ID -f Server/html/images/supercron/Dockerfile
    - docker push grownetics/supercron:$CI_PIPELINE_ID

'Build growctl':
  stage: build
  tags:
    - docker
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin docker.io
    - docker build src --no-cache -t grownetics/growctl:$CI_PIPELINE_ID -f src/gitlab.com/grownetics/grownetics/growctl/Dockerfile
    - docker push grownetics/growctl:$CI_PIPELINE_ID

# 'Rules Engine':
#   stage: test
#   script:
#     - cd Server/
#     - apk add --no-cache py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
#     - pip install docker-compose
#     - docker-compose -p "$CI_PIPELINE_ID"rulesengine -f docker-compose.citest.yml down || true
#     - docker-compose -p "$CI_PIPELINE_ID"rulesengine -f docker-compose.citest.yml up -d
#     - echo "Give mariaDB time to come online" && sleep 60
#     - docker exec "$CI_PIPELINE_ID"rulesengine_growdash_1 /bin/sh /var/www/html/seed.sh
#     - docker exec "$CI_PIPELINE_ID"rulesengine_growdash_1 /bin/sh /var/www/html/test.sh --testsuite BackEnd --stop-on-failure --coverage-text --colors=never
#   after_script:
#     - cd Server/
#     - docker-compose -p "$CI_PIPELINE_ID"rulesengine -f docker-compose.citest.yml down || true

# 'Front End':
#   stage: test
#   retry: 2
#   script:
#     - cd Server/
#     - docker-compose -p "$CI_PIPELINE_ID"frontend -f docker-compose.yml -f docker-compose.selenium.yml -f docker-compose.review.yml down || true
#     - docker-compose -p "$CI_PIPELINE_ID"frontend -f docker-compose.yml -f docker-compose.selenium.yml -f docker-compose.review.yml up -d
#     - echo "Give mariaDB time to come online" && sleep 20
#     - docker exec "$CI_PIPELINE_ID"frontend_phpunit_1 /bin/sh /var/www/html/seed.sh
#     - docker exec "$CI_PIPELINE_ID"frontend_phpunit_1 /bin/sh /var/www/html/test.sh --testsuite FrontEnd --stop-on-failure
#   after_script:
#     - cd Server/
#     - docker-compose -p "$CI_PIPELINE_ID"frontend -f docker-compose.yml -f docker-compose.selenium.yml -f docker-compose.review.yml down || true

'Review GrowServer':
  stage: review
  when: manual
  script:
    - cd Server/
    - wget https://github.com/rancher/cli/releases/download/v0.6.2/rancher-linux-amd64-v0.6.2.tar.gz
    - tar -zxvf rancher-linux-amd64-v0.6.2.tar.gz
    - chmod +x rancher-v0.6.2/rancher
    - echo $CI_ENVIRONMENT_SLUG
    - export IMAGE=$CI_PIPELINE_ID
    - echo '{"accessKey":"$RANCHER_ACCESS_KEY","secretKey":"$RANCHER_SECRET_KEY","url":"http://rancher.cropcircle.io:8080/v2-beta/schemas","environment":"1a5"}' > rancher.json
    - ./rancher-v0.6.2/rancher --config rancher.json rm -s $CI_ENVIRONMENT_SLUG || true
    - cp .env env.yaml
    # Set the Remote URL to the correct value
    - sed -i "s/localhost/cloud.$CI_ENVIRONMENT_SLUG.development.cloudforest.io/g" env.yaml
    - ./rancher-v0.6.2/rancher --config rancher.json up -e env.yaml -f docker-compose.yml -f docker-compose.rancher.yml -f docker-compose.faker.yml -f docker-compose.review.yml -s $CI_ENVIRONMENT_SLUG -d
    # - echo "Give MariaDB time to come online before running the DemoSeeds. 60 seconds.."
    # - sleep 60
    # - ./rancher-v0.6.2/rancher --config rancher.json exec "$CI_ENVIRONMENT_SLUG"-growdash-1 /bin/sh /var/www/html/bin/cake migrations seed --source DemoSeeds;
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://cloud.$CI_ENVIRONMENT_SLUG.development.cloudforest.io/
    on_stop: 'Stop Review GrowServer'
  only:
    - branches
  except:
    - master

'Stop Review GrowServer':
  stage: review
  variables:
    GIT_STRATEGY: none
  script:
    - wget https://github.com/rancher/cli/releases/download/v0.6.2/rancher-linux-amd64-v0.6.2.tar.gz
    - tar -zxvf rancher-linux-amd64-v0.6.2.tar.gz
    - chmod +x rancher-v0.6.2/rancher
    - echo '{"accessKey":"$RANCHER_ACCESS_KEY","secretKey":"$RANCHER_SECRET_KEY","url":"http://rancher.cropcircle.io:8080/v2-beta/schemas","environment":"1a5"}' > rancher.json
    - ./rancher-v0.6.2/rancher --config rancher.json rm -s $CI_ENVIRONMENT_SLUG || true
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - branches
  except:
    - master

'Tag Images for Testing':
  only:
    - master
  stage: release
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin docker.io
    - docker pull grownetics/nginx:$CI_PIPELINE_ID
    - docker tag grownetics/nginx:$CI_PIPELINE_ID grownetics/nginx:latest
    - docker push grownetics/nginx:latest

    - docker pull grownetics/growdash:$CI_PIPELINE_ID
    - docker tag grownetics/growdash:$CI_PIPELINE_ID grownetics/growdash:latest
    - docker push grownetics/growdash:latest

    - docker pull grownetics/growctl:$CI_PIPELINE_ID
    - docker tag grownetics/growctl:$CI_PIPELINE_ID grownetics/growctl:latest
    - docker push grownetics/growctl:latest

    - docker pull grownetics/supercron:$CI_PIPELINE_ID
    - docker tag grownetics/supercron:$CI_PIPELINE_ID grownetics/supercron:latest
    - docker push grownetics/supercron:latest

    - docker pull grownetics/socketio:$CI_PIPELINE_ID
    - docker tag grownetics/socketio:$CI_PIPELINE_ID grownetics/socketio:latest
    - docker push grownetics/socketio:latest

    - docker pull grownetics/handbook:$CI_PIPELINE_ID
    - docker tag grownetics/handbook:$CI_PIPELINE_ID grownetics/handbook:latest
    - docker push grownetics/handbook:latest

'Tag Images for Release':
  only:
    - /^v.*$/
  except:
    - branches
  stage: release
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin docker.io
    - docker pull grownetics/nginx:$CI_PIPELINE_ID
    - docker tag grownetics/nginx:$CI_PIPELINE_ID grownetics/nginx:$CI_COMMIT_REF_NAME
    - docker push grownetics/nginx:$CI_COMMIT_REF_NAME

    - docker pull grownetics/growdash:$CI_PIPELINE_ID
    - docker tag grownetics/growdash:$CI_PIPELINE_ID grownetics/growdash:$CI_COMMIT_REF_NAME
    - docker push grownetics/growdash:$CI_COMMIT_REF_NAME

    - docker pull grownetics/growctl:$CI_PIPELINE_ID
    - docker tag grownetics/growctl:$CI_PIPELINE_ID grownetics/growctl:$CI_COMMIT_REF_NAME
    - docker push grownetics/growctl:$CI_COMMIT_REF_NAME
    
    - docker pull grownetics/supercron:$CI_PIPELINE_ID
    - docker tag grownetics/supercron:$CI_PIPELINE_ID grownetics/supercron:$CI_COMMIT_REF_NAME
    - docker push grownetics/supercron:$CI_COMMIT_REF_NAME
    
    - docker pull grownetics/socketio:$CI_PIPELINE_ID
    - docker tag grownetics/socketio:$CI_PIPELINE_ID grownetics/socketio:$CI_COMMIT_REF_NAME
    - docker push grownetics/socketio:$CI_COMMIT_REF_NAME

    - docker pull grownetics/handbook:$CI_PIPELINE_ID
    - docker tag grownetics/handbook:$CI_PIPELINE_ID grownetics/handbook:$CI_COMMIT_REF_NAME
    - docker push grownetics/handbook:$CI_COMMIT_REF_NAME

'Deploy: QA':
  only:
      - master
  stage: deploy
  allow_failure: true
  retry: 1
  script:
    - cd Server/
    - wget https://github.com/rancher/cli/releases/download/v0.6.2/rancher-linux-amd64-v0.6.2.tar.gz
    - tar -zxvf rancher-linux-amd64-v0.6.2.tar.gz
    - chmod +x rancher-v0.6.2/rancher
    - echo '{"accessKey":"$RANCHER_ACCESS_KEY","secretKey":"$RANCHER_SECRET_KEY","url":"http://rancher.cropcircle.io:8080/v2-beta/schemas","environment":"1a5"}' > rancher.json
    - export IMAGE=$CI_PIPELINE_ID
    - ./rancher-v0.6.2/rancher --config rancher.json rm -s qa || true
    - ./rancher-v0.6.2/rancher --config rancher.json up -e qa.env -s qa -d -f docker-compose.yml -f docker-compose.faker.yml -f docker-compose.rancher.yml -f docker-compose.qa.yml
    - echo "Give MariaDB time to come online before running the DemoSeeds. 60 seconds.."
    - sleep 60
    - ./rancher-v0.6.2/rancher --config rancher.json exec qa-growdash-1 /bin/sh /var/www/html/bin/cake migrations seed --source DemoSeeds;

  environment:
    name: QA
    url: http://cloud.qa.development.cloudforest.io/
