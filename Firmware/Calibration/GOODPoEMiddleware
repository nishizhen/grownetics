#include <Arduino.h>
#include <MemoryFree.h>
#include <ArduinoJson.h>
#include <Ethernet2.h>
#include <SPI.h>
#include <OneWire.h>
#include <Wire.h>
#include <ctype.h>
#include <Adafruit_SleepyDog.h>

// ======================================
//            Sensor Device
// ======================================
// Installation Steps
// 1. Test PoE Cables
// 2. Test Cat5 Cable
// 3. Add Mac Address, IP address, and ID
// ======================================
//          Configuration Here
// ======================================

int deviceId = 1;
bool debug = true; // Must be set to false when in Production.
char server[] = "onsite.grownetics.co";
int serverPort = 81;

// ======================================
// DO NOT CHANGE ANYTHING BELOW THIS LINE
// ======================================

char version[10] = "M-1.2";

byte macs[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10,
0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,
0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30,
0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x40,
0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x50 };

int deviceTier = (int) (deviceId / 50);
int deviceMod = deviceId % 50;
byte mac[] = { 0x90, 0xA2, 0xDA, 0x0F, macs[deviceTier], macs[deviceMod] };

EthernetClient client;
int status = 1;
int ipSkipSize = 20;
int ipBase = 0;

unsigned long lastConnectionTime = millis();
unsigned long lastReadTime = 0;
boolean lastConnected = false;
boolean readingJson = false;
int refreshRate = 2000;
char inData[100];
int stringPos = 0;
unsigned char inputCount = 0;

byte humidityData;

int pinsType1[10];
int pinsType2[20];
int pinsType4[20];
int pinsType5[10];
int pinsType6[10];
int pinsType7[10];
int pinsType8[40];
int pinsType8Calibrations[40];
int pinsType9[10];
int pinsType11[15];
// Atlas Scientific RTD (Temperature)
int pinsType12[10];

int outs[50];

//Mux control pins
int s0 = 6;
int s1 = 7;
int s2 = 8;
int s3 = 9;

int controlPin[] = {s0, s1, s2, s3};

int muxChannel[16][4]={
  {0,0,0,0}, //channel 0
  {1,0,0,0}, //channel 1
  {0,1,0,0}, //channel 2
  {1,1,0,0}, //channel 3
  {0,0,1,0}, //channel 4
  {1,0,1,0}, //channel 5
  {0,1,1,0}, //channel 6
  {1,1,1,0}, //channel 7
  {0,0,0,1}, //channel 8
  {1,0,0,1}, //channel 9
  {0,1,0,1}, //channel 10
  {1,1,0,1}, //channel 11
  {0,0,1,1}, //channel 12
  {1,0,1,1}, //channel 13
  {0,1,1,1}, //channel 14
  {1,1,1,1}  //channel 15
};

char sensordata[30];                     //A 30 byte character array to hold incoming data from the sensors
byte sensor_bytes_received = 0;          //We need to know how many characters bytes have been received
int channel;                             //INT pointer for channel switching - 0-7 serial, 8-127 I2C addresses
byte i2c_response_code = 0;              //used to hold the I2C response code.
byte in_char = 0;                    //used as a 1 byte buffer to store in bound bytes from an I2C stamp.

void setup()
{
  pinMode(s0, OUTPUT);
  pinMode(s1, OUTPUT);
  pinMode(s2, OUTPUT);
  pinMode(s3, OUTPUT);
  digitalWrite(s0, LOW);
  digitalWrite(s1, LOW);
  digitalWrite(s2, LOW);
  digitalWrite(s3, LOW);
  Wire.begin();
  Serial.begin(9600);
  Serial1.begin(9600);

  // There's no rush. We just started, and may be recovering from a power outage.
  // Give the network time to come back online
  delay(5000)  ;
  
  srPrintln("We're live! Try and connect.");
  // if (debug == false) {
  //   if (Ethernet.begin(mac) == 0) {
  //     // DHCP connection failed. Try again.
  //     reboot();
  //   } else {
  //     srPrintln("Connected with DHCP");
  //     Serial.print("My IP address: ");
  //     for (byte thisByte = 0; thisByte < 4; thisByte++) {
  //       // print the value of each byte of the IP address:
  //       Serial.print(Ethernet.localIP()[thisByte], DEC);
  //       Serial.print(".");
  //     }

  //     Serial.println();
  //   }
  // }

}

void loop()
{
delay(1000);
  sendDataToServer();
  
  // If we're not in 'Server Maintenance Mode', then check for timeouts and reboot as needed
  // if (status < 2) {
  //   if (millis() - lastConnectionTime > refreshRate * 5) {
  //     srPrintln("Try and wake up..");
  //     transmitData("");
  //   }

  //   if (millis() - lastConnectionTime > refreshRate * 50) {
  //     srPrintln("Timed Out!");
  //     delay(100);
  //     reboot();
  //   }
  // }
}


void srPrint(char const* obj) {
  Serial.print(obj);
  Serial1.print(obj);
}

void srPrint(int obj) {
  Serial.print(obj);
  Serial1.print(obj);
}

void srPrintln(char const* obj) {
  Serial.println(obj);
  Serial1.println(obj);
}

void srPrintln(int obj) {
  Serial.println(obj);
  Serial1.println(obj);
}

void transmitData(char *data) {
  srPrint("Got data to send: ");
  srPrintln(data);
  if (strlen(data)<1) {
    data="\"x\":[]";
  }
  char jsonOut[500];
  sprintf(
    jsonOut,
    "{\"id\":%i,\"v\":\"%s\",\"st\":%i,\"m\":%i,%s}",
    deviceId,
    version,
    status,
    getFreeMemory(),
    data
  );
  if (debug == true) {
    return;
  }
  srPrint("Sending to ");
  srPrint(server);
  srPrint(":");
  srPrintln(serverPort);

  if (client.connect(server, serverPort)) {
    srPrintln("Connected!");
    client.print("GET /api/raw?q=");
    client.print(jsonOut);
    client.println(" HTTP/1.1");
    client.print("Host: ");
    client.println(server);
    client.println("Connection: close");
    client.println();
    lastConnectionTime = millis();
  } else {
    srPrintln("Not connected, try to reconnect.");
    client.stop();
    Ethernet.begin(mac);
  }
  srPrintln(jsonOut);
}


void reboot() {
  srPrintln("** Rebooting.");
  delay(500);
  asm volatile ("  jmp 0");
}

byte I2C_call() {           //function to parse and call I2C commands.
  sensor_bytes_received = 0;                            // reset data counter
  memset(sensordata, 0, sizeof(sensordata));            // clear sensordata array;

  Wire.beginTransmission(channel);                  //call the circuit by its ID number.
  Wire.write("r");                      //transmit the command that was sent through the serial port.
  Wire.endTransmission();                           //end the I2C data transmission.

  i2c_response_code = 254;
  while (i2c_response_code == 254) {      // in case the stamp takes longer to process than we expected

    delay(1000);                        // reading command takes about a second

    Wire.requestFrom(channel, 48, 1);     //call the circuit and request 48 bytes (this is more then we need).
    i2c_response_code = Wire.read();      //the first byte is the response code, we read this separately.

    while (Wire.available()) {            //are there bytes to receive.
      in_char = Wire.read();              //receive a byte.

      if (in_char == 0) {                 //if we see that we have been sent a null command.
        Wire.endTransmission();           //end the I2C data transmission.
        break;                            //exit the while loop.
      }
      else {
        sensordata[sensor_bytes_received] = in_char;        //load this byte into our array.
        sensor_bytes_received++;
      }
    }

    switch (i2c_response_code) {         //switch case based on what the response code is.
      case 1:                          //decimal 1.
        srPrintln( "< ack");     //means the command was successful.
        break;                           //exits the switch case.

      case 2:                          //decimal 2.
        srPrintln( "< command failed");     //means the command has failed.
        break;                           //exits the switch case.

      case 254:                        //decimal 254.
        srPrintln( "< command pending");    //means the command has not yet been finished calculating.
        break;                           //exits the switch case.

      case 255:                        //decimal 255.
        srPrintln( "No Data");    //means there is no further data to send.
        break;                           //exits the switch case.
    }
  }
}

// Float to array. Pass it a char array to put the float conversion into.
char *ftoa(char *a, double f, int precision)
{
  long p[] = {0,10,100,1000,10000,100000,1000000,10000000,100000000};

  char *ret = a;
  long heiltal = (long)f;
  itoa(heiltal, a, 10);
  while (*a != '\0') a++;
  *a++ = '.';
  long desimal = abs((long)((f - heiltal) * p[precision]));
  itoa(desimal, a, 10);
  return ret;
}

void readAnalogPin(char *data, int pinNumber) {
          char pinNumberBuf[4];
          itoa(pinNumber,pinNumberBuf,10);

          strcat(data,"[A");
          strcat(data,pinNumberBuf);
          strcat(data,":");
          char buffer[7];
	  srPrint("Reading analog pin: ");
    srPrintln(pinNumber);
          srPrintln(analogRead(pinNumber));
          ftoa(buffer,analogRead(pinNumber),2);
          strcat(data,buffer);
          strcat(data,"]");

}

boolean fetch_humidity_temperature(unsigned int *p_H_dat, unsigned int *p_T_dat, int pin)
{

  byte address, Hum_H, Hum_L, Temp_H, Temp_L, _status;
  unsigned int H_dat, T_dat;
  address = 0x27;
  delay(100);
  Wire.beginTransmission(address); 
  delay(100);
  if (Wire.endTransmission() == 0) {

    Wire.requestFrom((int)address, 0x03, (int) 4);
    Hum_H = Wire.read();
    Hum_L = Wire.read();
    Temp_H = Wire.read();
    Temp_L = Wire.read();
    Wire.endTransmission();
    
    _status = (Hum_H >> 6) & 0x03;
    Hum_H = Hum_H & 0x3f;
    H_dat = (((unsigned int)Hum_H) << 8) | Hum_L;
    T_dat = (((unsigned int)Temp_H) << 8) | Temp_L;
    T_dat = T_dat / 4;
    *p_H_dat = H_dat;
    *p_T_dat = T_dat;

    humidityData = _status;
    return(TRUE);
  } else {
    srPrintln("Fault wire.endTransmission");
    return(FALSE);
  }
}   

int isNumeric (const char * s)
{
  if (s == NULL || *s == '\0' || isspace(*s))
    return 0;
  char * p;
  strtod (s, &p);
  return *p == '\0';
}

///////////////////////////////////////////////////////////////////
// Function : int readCO2()
// Returns : CO2 Value upon success, 0 upon checksum failure
// Assumes : - Wire library has been imported successfully.
// - LED is connected to IO pin 13
// - CO2 sensor address is defined in co2_addr
///////////////////////////////////////////////////////////////////
int readCO2()
{
  int co2_value = 0;
  Wire.beginTransmission(0x68);
  Wire.write(0x22);
  Wire.write(0x00);
  Wire.write(0x08);
  Wire.write(0x2A);

  if (Wire.endTransmission() == 0) {
    delay(10);
    Wire.requestFrom(0x68, 4);
    byte ii = 0;
    byte buffer[4] = {0, 0, 0, 0};
    delay(10);
    while(Wire.available() and ii < 500)
    {
      buffer[ii] = Wire.read();
      ii++;
    }

    co2_value = 0;
    co2_value |= buffer[1] & 0xFF;
    co2_value = co2_value << 8;
    co2_value |= buffer[2] & 0xFF;

    byte sum = 0;
    sum = buffer[0] + buffer[1] + buffer[2];

    if(sum == buffer[3])
    {
      return co2_value;
    }
    else
    {
      return 0;
    }
  } else {
    srPrintln("Fault wire transmission Co2");
    return(FALSE);
  }
}

int setPins(JsonArray& array, int pins[])
{
  srPrintln("Set pins");
  srPrintln(array.size());
  int ii = 0;
  boolean ended = false;
  while (ended == false and ii < 50) {
    
    srPrint("Strlen: ");
    srPrintln(strlen(array[ii]));

    const char* sensor = array[ii].asString();
    const char *sensorP = sensor;
      srPrint("Sensor: ");
      srPrintln(sensor);
      // Drop the A / D marker by moving the pointer forward one slot.
    if (!isDigit(sensorP[0])) {
      sensorP++;
    }
    if (strlen(sensorP)>0) {
      srPrint("Sensor length: ");
      srPrintln(strlen(sensorP));
      srPrint("Got a sensor!!!: ");
      srPrintln(sensorP);
      pins[ii] = atoi(sensorP);
      ii++;
    } else {
      ended = true;
    }
  }
  pins[ii] = -1;
}

int switchMux(int channel){
  channel--;
  //loop through the 4 sig
  for(int aa = 0; aa < 4; aa++){
    digitalWrite(controlPin[aa], muxChannel[channel][aa]);
  }
  delay(50);
}

void sendDataToServer() {
  // if you're not connected, and ten seconds have passed since
  // your last connection, then connect again and send data:
  if(!client.connected() && (millis() - lastConnectionTime > refreshRate)) {
    srPrint("Device Status: ");
    srPrintln(status);

    switch (status) {
      case 0:
      {
        transmitData("\"b\":0");
        break;
      }
      case 1:
      case 2:
      {
        char data[20] = "";

        // if (getFreeMemory() < 40) {
        //   srPrintln("*Memory gone!");
        //   delay(5000);
        //   asm volatile ("  jmp 0");
        // }

        // Humidity and air temp

          int pinNumber = 1;

          srPrint("pinsType2 pin: ");
          srPrintln(pinNumber);

          switchMux(pinNumber);

          unsigned int H_dat, T_dat;
          float RH, T_C;
          boolean gotHumidity = fetch_humidity_temperature(&H_dat, &T_dat, pinNumber);
          char pinNumberBuf[4];
          itoa(pinNumber,pinNumberBuf,10);

          if (gotHumidity) {
            srPrintln("Got data!");
            RH = (float) H_dat * 6.10e-3;
            T_C = (float) T_dat * 1.007e-2 - 40.0;
            strcat(data,"[M");
            strcat(data,pinNumberBuf);
            strcat(data,":");
            char buffer[7];
            ftoa(buffer,RH,2);
            strcat(data,buffer);
            strcat(data,"-");
            ftoa(buffer, T_C, 2);
            strcat(data,buffer);
            strcat(data,"]");
          } else {
            // We didn't get a valid reading, send back 0
            strcat(data,"[M");
            strcat(data,pinNumberBuf);
            strcat(data,":0-0]");
          }


        // Watchdog.enable(2000);
        // Co2
        srPrintln("Get co2?");
        // ii = 0;
        // while(pinsType4[ii] > -1)
        // {
          srPrintln("Get CO2");
          if (strlen(data)!=0) {
            strcat(data,",");
          }
          char temp[10];
          pinNumber = 3;
          switchMux(pinNumber);
          // srPrint("pinsType4 pin: ");
          // srPrintln(pinNumber);
          // delay(100);
          int co2Value = readCO2();
          srPrint("Got co2: ");
          srPrintln(co2Value);
        //   ii++;
        // }
        // Watchdog.disable();


        // // PAR Sensor
        // ii = 0;
        // Watchdog.enable(2000);
        // while(pinsType11[ii] > -1)
        // {
        //   if (strlen(data)!=0) {
        //     strcat(data,",");
        //   }

        //   int pinNumber = pinsType11[ii];
        //   srPrint("Got pin number: ");
        //   srPrintln(pinNumber);

        //   readAnalogPin(data,pinNumber);

        //   ii++;
        // }
        // Watchdog.disable();

        srPrintln(data);
        
        // sprintf(outputData,"\"d\":\"%s\"",
        //   data
        // );
        // transmitData(outputData);

        // free(pinsBuf);
        break;
      }
    }
  }
  // store the state of the connection for next time through the loop:
  srPrintln("Out the loop");
  if (debug == TRUE) {
    lastConnected = millis();
  } else {
    lastConnected = client.connected();
  }
}
